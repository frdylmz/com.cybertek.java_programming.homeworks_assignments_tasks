@Author>>>  SHAHIN GADIMOV
			BATCH 10
			SDET - 2018 FALL

THE FOLLOWING CODE FRAGMENTS ARE GIVEN:

FRAGMENT 1:
	public class Child extends Parent {
/* 11*/	private int i = addNum() ;   //optional assignment with method
		public static int j = addStaticNum();  //optional assignment with method
		public static final int CONSTANT; 
	
		public static void main(String[] args) {
			Child child = new Child(); 
			Child child2 = new Child(); 
		}
		
/* 15*/	public Child() {
			System.out.println("Child constructor");	
		}
		
/* 13*/	{ System.out.println("Child instance block 1 "); }
/* 14*/	{ System.out.println("Child instance block 2"); }
	
/* 5 */	static {System.out.println("Child static block 1"); CONSTANT = 15 ; }
/* 6 */	static {System.out.println("Child static block 2");}
	
		public int addNum(){
/* 12*/		System.out.println("Child addNum to child instance field i ");
			return 5; 
		}
		public static int addStaticNum(){
/* 4 */		System.out.println("Child addStaticNum to child static field j ");
			return 6; 
		}	
	}

FRAGMENT 2:
	class Parent {
/* 16*/	private int m = addNum();  //optional assignment with method
		public static int n = addStaticNum();  //optional assignment with method
		public static final int CONSTANT = 15 ; 

/* 10*/	public Parent() {
			System.out.println("Parent constructor");
		}
		private int addNum() {
/* 7 */		System.out.println("Parent addNum() to assign val to instance field");
			return 0;
		}
		private static int addStaticNum() {
/* 1 */		System.out.println("Parent addStaticNum() to assign val to static field");
			return 0;
		}
		
/* 8 */	{System.out.println("Parent instance block 1");}
/* 9 */	{System.out.println("Parent instance block 2");}
		
/* 2 */	static {System.out.println("Parent static  block 1");}
/* 3 */	static {System.out.println("Parent static  block 2");}
	}


	To demonstrate what the code flow will look like, I have numbered the lines
	within the code per their order of execution, seen above.
	

HERE IS MY ANALYSIS / EXPLANATION OF WHAT'S GOING ON:
	In Java, the order of initializations is as follows:
	1.	Any static fields get initialized as soon as the Class is referred to. 
		The reference doesn't have to be by initializing a reference to a class. Any
		call to the class or its methods or its static fields is considered as a 
		reference. At this stage, static blocks, then static fields are initialized.
		They are initialized only once and are not to be destroyed until the program 
		is terminated.
	2.	Initializer blocks (regulars, non-static blocks) have the second priority.
		They are run in the order they are placed within the code. They have the same
		level of priority as instance variables. So, if your code is having your init
		blocks initialize any of your fields, you have to make sure that they are 
		placed in a logical order. An initializer block cannot initialize a field that
		is declared after it is.
		Init blocks are run every time an object of the class is created.
	3.	After init blocks have finished the execution, constructors take over. The 
		constructor that the user calls will then proceed with deployment. At this
		stage, if the class is extending another class (if there are parent classes
		involved), then the parent constructors are to be activated first, in order
		of their superiority (the class at the higher end of the hieararchy, gets to 
		be referred to first).
